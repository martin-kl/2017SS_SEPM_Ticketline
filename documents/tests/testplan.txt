Unit Tests:
	- minimum 2 Tests pro Methode (ein Fehlerfall + ein Normalfall)
	- jedes Mitglied schreibt Unit Tests für den eigenen Code
	- vor dem Merge müssen alle Unit Tests positiv durchlaufen
	- Tests sollen gleichzeitig mit dem Entwickeln der Klasse entstehen
	- Jeder Unittest muss seine eigenen Testdaten generieren und verwalten sodass ein ändern der automatisch generierten Daten keinesfalss zu einem Fehlschlagen der Tests führen kann.

Komponententests:
	- werden nicht gemacht
	- die öffentliche API von Komponenten wird durch das beschriebene Unit Test verfahren automatisch getestet

Integrationstest:
	- testen die Rest-Schnittstelle des Servers
	- pro Userstory ein Integrationstest
	- bevor eine Userstory gemerged wird, soll das Feature durch einen Integrationstest getestet werden
	- eventuell Aufteilung der Integrationstests im Team
	- es werden Testdaten bereitgestellt, der Änderung den Test aber nicht beeinflussen darf  

Systemtests:
	- werden mind. 3 Tage vor jedem MR durchgeführt
	- jedem Teammitglied wird ein zu testender Teil der Applikation zugewiesen
	- jedes Teammitglied testet ein möglichst "fremdes" Feature
	- jedes Teammitglied protokolliert seine Testergebnisse (Systemtestprotokoll)
	- die Gesamttestergebnisse werden von den Testverantwortlichen zusammengestellt

	Genauere Beschreibung:
	Es wird ein Dokument geben, dass für jede User Story festlegt was an ihr manuell zu testen ist.
	Die Testfälle sollen nur vage beschrieben sein (z.B.: Test: „Teste Benutzer hinzufügen mit validen Inputs“, 
	Erwarte: „Dass der Nutzer hinzugefügt wurde“).
	Vor der Durchführung der Systemtests wird ein Meeting abgehalten in welchem festgelegt wird welche Tests
	diesem Dokument hinzugefügt werden. Dabei soll jedes Teammitglied ans Wort kommen um Vorschläge abzugeben.
	Der Testverantwortliche führt Protokoll und erweitert dabei das Dokument. 
	Bei demselben Meeting wird festgelegt wer welche Systemtests durchführen wird. Es ist anhand der Bereitgestellten
	Vorlage zu protokollieren wenn Tests nicht erfolgreich waren oder wenn es Schwierigkeiten gab eine Aktion überhaupt
	auszuführen (UI nicht verständlich). Die Protokolle sind in auf den dev-Branch zu pushen und vom Testverantwortlichen
	zu kontrollieren. Im Fehlerfall sollen sich Tester und Verantwortlicher selbstständig koordinieren um den Fehler zu finden.
	Das Dokument enthält für jeden Test: 
		- Die User Story
		- den Verantworlichen für das geteste Feature, 
		- was durchzuführen ist, 
		- was erwartet wird
